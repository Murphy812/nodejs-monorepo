name: CI

on: [push]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - uses: actions/setup-node@v1
        with:
          node-version: '10.x'
      - uses: bahmutov/npm-install@v1.1.0
      - run: npx lerna run coverage:test --concurrency=1 --stream
      - run: npx lerna run coverage:merge
      - name: Codecov upload
        run: yarn run coverage:codecov
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
      - name: Coveralls prepare
        run: npx nyc report --reporter=text-lcov > lcov.info
      - name: Coveralls upload
        uses: coverallsapp/github-action@master
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          path-to-lcov: lcov.info
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - uses: actions/setup-node@v1
        with:
          node-version: '10.x'
      - uses: bahmutov/npm-install@v1.1.0
      - run: npx lerna run lint
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - uses: actions/setup-node@v1
        with:
          node-version: '10.x'
      - uses: bahmutov/npm-install@v1.1.0
      - run: yarn build
  docker_models_manager:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - name: Build & push to dockerhub
        uses: elgohr/Publish-Docker-Github-Action@master
        with:
          name: sr2020/models-manager
          tags: ${{ github.sha }}
          dockerfile: packages/sr2020-models-manager/Dockerfile
          username: sr2020
          password: ${{ secrets.DOCKER_PASSWORD }}

  docker_model_engine:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - name: Build & push to dockerhub
        uses: elgohr/Publish-Docker-Github-Action@master
        with:
          name: sr2020/model-engine
          tags: ${{ github.sha }}
          dockerfile: packages/sr2020-model-engine/Dockerfile
          username: sr2020
          password: ${{ secrets.DOCKER_PASSWORD }}
  docker_push:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - name: Build & push to dockerhub
        uses: elgohr/Publish-Docker-Github-Action@master
        with:
          name: sr2020/push
          tags: ${{ github.sha }}
          dockerfile: packages/push/Dockerfile
          username: sr2020
          password: ${{ secrets.DOCKER_PASSWORD }}
  deploy_admin_ui:
    runs-on: ubuntu-latest
    needs: [test, lint, build]
    steps:
      - uses: actions/checkout@v1
      - uses: actions-hub/gcloud@272.0.0
        env:
          PROJECT_ID: imposing-elixir-249711
          APPLICATION_CREDENTIALS: ${{ secrets.GCP_CREDENTIALS }}
          CLI: gsutil
        with:
          args: -h "Cache-Control:no-cache,max-age=0" cp packages/admin-ui/* gs://admin-ui.evarun.ru

  deploy_gke:
    runs-on: ubuntu-latest
    needs: [test, lint, build, docker_models_manager, docker_model_engine, docker_push]
    steps:
      - uses: GoogleCloudPlatform/github-actions/setup-gcloud@master
        with:
          service_account_email: ${{ secrets.SA_EMAIL }}
          service_account_key: ${{ secrets.GCP_CREDENTIALS }}
      - run: gcloud components install kubectl
      - run: gcloud container clusters get-credentials prod --project imposing-elixir-249711 --zone europe-west3-b
      - uses: actions/checkout@v1
      - run: |
          kubectl config set-context --current --namespace=production
          kubectl set image deployment/push push=sr2020/push:$GITHUB_SHA --record
          kubectl rollout status deployment/push
          kubectl set image deployment/model-engine model-engine=sr2020/model-engine:$GITHUB_SHA --record
          kubectl rollout status deployment/model-engine
          kubectl set image deployment/models-manager models-manager=sr2020/models-manager:$GITHUB_SHA --record
          kubectl rollout status deployment/models-manager
